# -*- coding: utf-8 -*-
"""Introdução ao ML classificação - 3.1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16fk2CxyOPUiakHwaCGVbqWge3wSdtvey
"""

!pip install seaborn==0.9.0

import pandas as pd

uri = 'https://gist.githubusercontent.com/guilhermesilveira/1b7d5475863c15f484ac495bd70975cf/raw/16aff7a0aee67e7c100a2a48b676a2d2d142f646/projects.csv'

dados = pd.read_csv(uri)

mapa = {
    "expected_hours" : "horas_esperadas",
    "price" : "preco",
    "unfinished": "nao_finalizado"
}

dados = dados.rename(columns = mapa)

troca = {
    0:1,
    1:0
}

dados["finalizado"] = dados.nao_finalizado.map(troca)
dados.head()

import seaborn as sns

sns.scatterplot(x = "horas_esperadas", y = "preco", data=dados)
sns.scatterplot(x = "horas_esperadas", y = "preco", hue = "finalizado", data=dados)

sns.relplot(x = "horas_esperadas", y = "preco",hue = "finalizado", col = "finalizado", data=dados)

x = dados[["horas_esperadas", "preco"]]
y = dados[["finalizado"]]

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

SEED = 20
np.random.seed(SEED)

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, stratify = y)
print("Treinamentos com %d elementos e testaremos com %d elementos" % (len(treino_x), len(teste_x)))
modelo = SVC()
modelo.fit(treino_x, treino_y)

#teste do modelo
previsao = modelo.predict(teste_x)
acuracia = accuracy_score(teste_y, previsao) * 100
print("A acurácia do modelo foi de %.2f%%" % acuracia)

import numpy as np
previsoes_de_base = np.ones(540)
acuracia_base = accuracy_score(teste_y, previsoes_de_base) * 100
print("A acurácia do algoritmo de baseline foi de %.2f%%" % acuracia_base)

