# -*- coding: utf-8 -*-
"""Introdução ML classificação -  4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GwTQou2G6tJdf3V3PkltJQTiQAvmmmJW
"""

!pip install graphviz==0.20.1

"""## **Importação de dados**"""

import pandas as pd

uri = 'https://gist.githubusercontent.com/guilhermesilveira/4d1d4a16ccbf6ea4e0a64a38a24ec884/raw/afd05cb0c796d18f3f5a6537053ded308ba94bf7/car-prices.csv'
dados = pd.read_csv(uri)
dados.head()

"""## Tratamento e conversão de dados"""

#Renomear as colunas
a_renomear = {
    'mileage_per_year': "milhas_por_ano",
    "model_year": "ano_do_modelo",
    "price": "preco",
    "sold": "vendido"
}

dados = dados.rename(columns = a_renomear)

#Faz a troca de sim e não por 0 e 1
a_trocar ={
    "no": 0,
    "yes": 1
}

dados.vendido = dados.vendido.map(a_trocar)
dados.head()

from datetime import datetime

#achar a idade do veículo
ano_atual = datetime.today().year
dados['idade_do_modelo'] =  ano_atual - dados.ano_do_modelo
dados.head()

#Achar a quilometragem -> converer milhas para quilometros
dados['km_por_ano'] = dados.milhas_por_ano * 1.60934

#exclui da tabela as colunas que não desejamos trabalhar
dados = dados.drop(columns = ["Unnamed: 0", "milhas_por_ano","ano_do_modelo"], axis = 1)

dados.head()

import seaborn as sns
#Plotagem comparativa dos gráficos
sns.pairplot(dados[["preco", 'vendido','idade_do_modelo','km_por_ano']], diag_kind="kde")

"""## Classificação"""

import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

#caracteristicas
x = dados[["preco", "idade_do_modelo", "km_por_ano"]]
y = dados[["vendido"]]

SEED = 5
np.random.seed(SEED)

raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, stratify = y)
print("Treinamento feito com %d elementos e teste feito com %d elementos" %(len(raw_treino_x), (len(raw_teste_x))))

scaler = StandardScaler()
scaler.fit(raw_treino_x)
treino_x = scaler.transform(raw_treino_x)
teste_x = scaler.transform(raw_teste_x)


modelo = SVC()
modelo.fit(treino_x, treino_y)
previsao = modelo.predict(teste_x)

#teste do modelo
acuracia = accuracy_score(teste_y, previsao) * 100
print("A acurácia do modelo foi de %.2f%%" % acuracia)

"""## Verificação da acurácia do modelo
usando sklearn.dummy
"""

from sklearn.dummy import DummyClassifier

dummy_stratified = DummyClassifier()
dummy_stratified.fit(treino_x, treino_y)

acuracia = dummy_stratified.score(teste_x, teste_y) * 100
print("A acurácia do dummy stratified foi de %.2f%%" % acuracia)

"""## Decision Tree Classifier
sklearn decision tree
"""

import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import export_graphviz
from sklearn.metrics import accuracy_score

#caracteristicas
x = dados[["preco", "idade_do_modelo", "km_por_ano"]]
y = dados[["vendido"]]

SEED = 5
np.random.seed(SEED)

raw_treino_x, raw_teste_x, treino_y, teste_y = train_test_split(x, y, test_size = 0.25, stratify = y)
print("Treinamento feito com %d elementos e teste feito com %d elementos" %(len(raw_treino_x), (len(raw_teste_x))))

modelo = DecisionTreeClassifier(max_depth = 3)
modelo.fit(raw_treino_x, treino_y)
previsao = modelo.predict(raw_teste_x)

#teste do modelo
acuracia = accuracy_score(teste_y, previsao) * 100
print("A acurácia do modelo foi de %.2f%%" % acuracia)

from sklearn.tree import DecisionTreeClassifier
import graphviz

features = x.columns
dot_data = export_graphviz(modelo, out_file = None,
                           filled = True, rounded = True,
                           feature_names = features,
                           class_names = ['nao','sim'])
grafico = graphviz.Source(dot_data)
grafico